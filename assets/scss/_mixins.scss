// Font Mixins
@mixin serif-font {
  font-family: 'Droid Serif', 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}
@mixin script-font {
  font-family: 'Kaushan Script', 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}
@mixin body-font {
  font-family: 'Roboto Slab', 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}
@mixin heading-font {
  font-family: 'Montserrat', 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}

/* mediaquery respond to max-width breakpoints */
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($grid-breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($grid-breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// bg HEX to RGBA with opacity
@mixin background-opacity($color, $opacity) {
  background: $color; /* The Fallback */
  background: rgba($color, $opacity);
}

// margin Y pages
@mixin margin-y-page() {
  margin: $margin-y-page 0;
}

@mixin button-fab-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
    background: $color !important;
    color: $white !important;
    border: 1px solid $color !important;

  @include hover {
    background: $white !important;
    color: $color !important;
  }

   &:focus,
   &.focus {
     box-shadow: none;
   }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;
  }
}
@mixin button-flat-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
    color: $color !important;
    border: 1px solid $color !important;

  @include hover {
    background: mix($color, $black, 20%) !important;
    color: $color !important;
  }

   &:focus,
   &.focus {
     box-shadow: none;
   }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;
  }
}